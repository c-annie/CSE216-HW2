import java.util.List;
import java.util.ArrayList;

/**
 * An unmodifiable point in the standard two-dimensional Euclidean space. The coordinates of such a point is given by
 * exactly two doubles specifying its <code>x</code> and <code>y</code> values.
 */
public class TwoDPoint implements Point {
    private double x;
    private double y;

    public TwoDPoint(double x, double y) {
        this.x = x;
        this.y = y;
    }
    public double getX() {
        return x;
    }

    public double getY() {
        return y;
    }
    /**
     * @return the coordinates of this point as a <code>double[]</code>.
     */

    @Override
    public double[] coordinates() {
        double[] array = new double[]{this.x, this.y};
        return array;
    }

    /**
     * Returns a list of <code>TwoDPoint</code>s based on the specified array of doubles. A valid argument must always
     * be an even number of doubles so that every pair can be used to form a single <code>TwoDPoint</code> to be added
     * to the returned list of points.
     *
     * @param coordinates the specified array of doubles.
     * @return a list of two-dimensional point objects.
     * @throws IllegalArgumentException if the input array has an odd number of doubles.
     */
    public static List<TwoDPoint> ofDoubles(double... coordinates) throws IllegalArgumentException {
        double size = coordinates.length;
        List<TwoDPoint> list = new ArrayList();
        if (size % 2 == 0) {
            for(int i =0; i<coordinates.length; i++) {
                TwoDPoint temp = new TwoDPoint(coordinates[i], coordinates[i++]);
                list.add(temp);
            }
        }
        else{
            throw new IllegalArgumentException("not even");
        }
        return list;
    }
}
