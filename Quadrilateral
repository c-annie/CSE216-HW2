import java.util.Arrays;
import java.util.List;

public class Quadrilateral implements Positionable, TwoDShape {

    private final TwoDPoint[] vertices = new TwoDPoint[4];

    public Quadrilateral(double... vertices) {
        this(TwoDPoint.ofDoubles(vertices));
    }

    public Quadrilateral(List<TwoDPoint> vertices) {
        int n = 0;
        for (TwoDPoint p : vertices) this.vertices[n++] = p;
        if (!isMember(vertices))
            throw new IllegalArgumentException(String.format("Invalid set of vertices specified for %s",
                    this.getClass().getCanonicalName()));
    }

    /**
     * Given a list of four points, adds them as the four vertices of this quadrilateral in the order provided in the
     * list. This is expected to be a counterclockwise order of the four corners.
     *
     * @param points the specified list of points.
     * @throws IllegalStateException if the number of vertices provided as input is not equal to four.
     */

    @Override
    public void setPosition(List<? extends Point> points) {
        int pointlen = points.size();
        if(pointlen < 4) {
            throw new IllegalArgumentException("not enough vertices");
        }
        else if(pointlen > 4) {
            throw new IllegalArgumentException("too many vertices");
        }
        else if(pointlen == 4){
            for(int i = 0; i<vertices.length; i++) {
                vertices[i] = (TwoDPoint) points.get(i);
            }
        }
    }

    @Override
    public List<TwoDPoint> getPosition() {
        return Arrays.asList(vertices);
    }

    /**
     * @return the lengths of the four sides of the quadrilateral. Since the setter {@link Quadrilateral#setPosition(List)}
     *         expected the corners to be provided in a counterclockwise order, the side lengths are expected to be in
     *         that same order.
     */
    protected double[] getSideLengths() {
        double[] sidelengths = new double[vertices.length];
        sidelengths[0] = Math.sqrt(Math.pow((vertices[0].getX() - vertices[1].getX()), 2)
                + Math.pow((vertices[0].getY() - vertices[1].getY()), 2));
        sidelengths[1] = Math.sqrt(Math.pow((vertices[1].getX() - vertices[2].getX()), 2)
                + Math.pow((vertices[1].getY() - vertices[2].getY()), 2));
        sidelengths[2] = Math.sqrt(Math.pow((vertices[2].getX() - vertices[3].getX()), 2)
                + Math.pow((vertices[2].getY() - vertices[3].getY()), 2));
        sidelengths[3] = Math.sqrt(Math.pow((vertices[3].getX() - vertices[0].getX()), 2)
                + Math.pow((vertices[3].getY() - vertices[0].getY()), 2));
        return sidelengths;
    }

    @Override
    public int numSides() {
        return 4; }

    @Override
    public double smallestX() {
        double smallX = 0;
        double semi1 = 0;
        double semi2 = 0;
        double test1 = vertices[0].coordinates()[0];
        double test2 = vertices[1].coordinates()[0];
        double test3 = vertices[2].coordinates()[0];
        double test4 = vertices[3].coordinates()[0];
        if(test1 < test2)
            semi1 += test1;
        if(test1> test2)
            semi1 += test2;
        if(test3 <test4)
            semi2 += test3;
        if(test3>test4)
            semi2 += test4;
        if(semi1>semi2)
            smallX += semi2;
        if(semi1<semi2)
            smallX += semi1;
        return smallX;
    }

    @Override
        public boolean isMember(List<? extends Point> vertices) { return vertices.size() == 4; }
    }

